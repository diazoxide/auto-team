name: Install Scripts Testing

on:
  push:
    paths:
      - 'scripts/**'
      - '.github/workflows/install-scripts.yml'
  pull_request:
    paths:
      - 'scripts/**'
      - '.github/workflows/install-scripts.yml'
  workflow_dispatch:

env:
  GO_VERSION: '1.22'

jobs:
  test-install-script:
    name: Test Install Script
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: darwin
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Build binary for testing
      run: make build
    
    - name: Test fresh installation
      run: |
        echo "Testing fresh installation..."
        # Remove any existing installation
        sudo rm -f /usr/local/bin/autoteam || true
        
        # Test installation script
        bash scripts/install.sh --force
        
        # Verify installation
        if ! command -v autoteam >/dev/null 2>&1; then
          echo "❌ Fresh installation failed - binary not found"
          exit 1
        fi
        
        version=$(autoteam --version)
        echo "✅ Fresh installation successful: $version"
    
    - name: Test reinstallation (force mode)
      run: |
        echo "Testing forced reinstallation..."
        # Should reinstall without prompting
        bash scripts/install.sh --force
        
        # Verify still works
        if ! command -v autoteam >/dev/null 2>&1; then
          echo "❌ Forced reinstallation failed"
          exit 1
        fi
        
        version=$(autoteam --version)
        echo "✅ Forced reinstallation successful: $version"
    
    - name: Test non-interactive mode (should exit gracefully)
      run: |
        echo "Testing non-interactive mode..."
        # This should detect non-interactive mode and exit with instructions
        output=$(echo "" | bash scripts/install.sh 2>&1 || true)
        
        if echo "$output" | grep -q "Non-interactive mode detected"; then
          echo "✅ Non-interactive mode correctly detected"
        else
          echo "❌ Non-interactive mode not properly handled"
          echo "Output: $output"
          exit 1
        fi
    
    - name: Test custom directory installation
      run: |
        echo "Testing custom directory installation..."
        mkdir -p "$HOME/.local/bin"
        
        # Install to custom directory
        bash scripts/install.sh --force --dir "$HOME/.local/bin"
        
        # Verify installation in custom directory
        if [ ! -f "$HOME/.local/bin/autoteam" ]; then
          echo "❌ Custom directory installation failed"
          exit 1
        fi
        
        # Test execution
        if ! "$HOME/.local/bin/autoteam" --version >/dev/null 2>&1; then
          echo "❌ Custom directory binary not executable"
          exit 1
        fi
        
        echo "✅ Custom directory installation successful"
    
    - name: Test piped installation (non-interactive)
      run: |
        echo "Testing piped installation simulation..."
        # Simulate curl | bash behavior
        cat scripts/install.sh | bash -s -- --force
        
        # Should work with force flag
        if ! command -v autoteam >/dev/null 2>&1; then
          echo "❌ Piped installation failed"
          exit 1
        fi
        
        echo "✅ Piped installation successful"

  test-uninstall:
    name: Test Uninstall Functionality
    needs: test-install-script
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install autoteam first
      run: |
        make build
        bash scripts/install.sh --force
        
        # Verify installation
        if ! command -v autoteam >/dev/null 2>&1; then
          echo "❌ Installation failed"
          exit 1
        fi
        
        echo "✅ Installation completed for uninstall test"
    
    - name: Create and test uninstall script
      run: |
        # Create uninstall script on the fly
        cat > uninstall.sh << 'EOF'
        #!/bin/bash
        
        set -e
        
        BINARY_NAME="autoteam"
        INSTALL_LOCATIONS=(
          "/usr/local/bin/$BINARY_NAME"
          "$HOME/.local/bin/$BINARY_NAME"
          "/opt/local/bin/$BINARY_NAME"
        )
        
        echo "AutoTeam Uninstall Script"
        echo "=========================="
        
        removed=false
        
        for location in "${INSTALL_LOCATIONS[@]}"; do
          if [ -f "$location" ]; then
            echo "Found $BINARY_NAME at: $location"
            
            if [ -w "$(dirname "$location")" ]; then
              rm -f "$location"
              echo "✓ Removed $location"
              removed=true
            else
              sudo rm -f "$location"
              echo "✓ Removed $location (with sudo)"
              removed=true
            fi
          fi
        done
        
        if [ "$removed" = true ]; then
          echo "✅ AutoTeam uninstalled successfully"
        else
          echo "ℹ AutoTeam was not found in standard locations"
        fi
        
        # Verify removal
        if command -v "$BINARY_NAME" >/dev/null 2>&1; then
          echo "⚠ Warning: $BINARY_NAME is still available in PATH"
          echo "Location: $(which $BINARY_NAME)"
        else
          echo "✓ $BINARY_NAME removed from PATH"
        fi
        EOF
        
        chmod +x uninstall.sh
        
        # Test uninstall
        bash uninstall.sh
        
        # Verify removal
        if command -v autoteam >/dev/null 2>&1; then
          echo "❌ Uninstall failed - binary still available"
          exit 1
        fi
        
        echo "✅ Uninstall successful"

  test-build-from-source:
    name: Test Build from Source Installation  
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Remove any existing binary
      run: sudo rm -f /usr/local/bin/autoteam || true
    
    - name: Test build from source (latest version)
      run: |
        echo "Testing build from source installation..."
        
        # The install script should build from source when VERSION=latest
        VERSION=latest bash scripts/install.sh --force
        
        # Verify installation
        if ! command -v autoteam >/dev/null 2>&1; then
          echo "❌ Build from source installation failed"
          exit 1
        fi
        
        version=$(autoteam --version)
        echo "✅ Build from source successful: $version"
        
        # Verify it's a recent build (should contain today's date or recent commit)
        if echo "$version" | grep -E "($(date +%Y-%m-%d)|commit)" >/dev/null; then
          echo "✅ Version contains expected build info"
        else
          echo "⚠ Warning: Version may not reflect current build: $version"
        fi

  test-error-conditions:
    name: Test Error Conditions
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Test without Go (should fail gracefully)
      run: |
        echo "Testing installation without Go..."
        
        # Hide Go temporarily
        sudo mv /opt/hostedtoolcache/go /opt/hostedtoolcache/go.bak || true
        export PATH=$(echo "$PATH" | sed 's|/opt/hostedtoolcache/go/[^:]*bin:||g')
        
        # Should fail with helpful error
        output=$(bash scripts/install.sh --force 2>&1 || true)
        
        if echo "$output" | grep -q "Go is required to build from source"; then
          echo "✅ Correctly detected missing Go dependency"
        else
          echo "❌ Did not properly handle missing Go"
          echo "Output: $output"
        fi
        
        # Restore Go
        sudo mv /opt/hostedtoolcache/go.bak /opt/hostedtoolcache/go || true
    
    - name: Test with insufficient permissions
      run: |
        echo "Testing installation with read-only target directory..."
        
        # Create a read-only directory
        mkdir -p /tmp/readonly
        chmod 555 /tmp/readonly
        
        # Should handle permission error gracefully
        output=$(bash scripts/install.sh --force --dir /tmp/readonly 2>&1 || true)
        
        if echo "$output" | grep -q "Administrator privileges required"; then
          echo "✅ Correctly handled permission issues"
        else
          echo "ℹ Permission handling may vary by system"
        fi
        
        # Cleanup
        chmod 755 /tmp/readonly
        rm -rf /tmp/readonly

  verify-uninstall-script:
    name: Verify Uninstall Script
    runs-on: ubuntu-latest
    needs: [test-install-script, test-uninstall]
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Test existing uninstall script
      run: |
        if [ -f "scripts/uninstall.sh" ]; then
          echo "Testing uninstall script syntax..."
          bash -n scripts/uninstall.sh
          echo "✅ Uninstall script syntax is valid"
          
          echo "Testing uninstall script help..."
          bash scripts/uninstall.sh --help
          echo "✅ Uninstall script help works"
        else
          echo "⚠ No uninstall script found"
        fi
